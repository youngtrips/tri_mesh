!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DET	utils.h	26;"	d
INIT_HALF_EDGE	mesh.h	40;"	d
INIT_VERTEX	mesh.h	24;"	d
MESH_ADD_EDGE	mesh.h	73;"	d
MESH_ADD_TRIANGLE	mesh.h	76;"	d
MESH_ADD_VERTEX	mesh.h	70;"	d
MESH_ALLOC_OBJECT	mesh.c	16;"	d	file:
MESH_FREE_OBJECT	mesh.c	32;"	d	file:
MESH_FREE_OBJ_MEM	mesh.c	440;"	d	file:
SQR	utils.h	15;"	d
__BAES_H	base.h	9;"	d
__DLIST_H	dlist.h	25;"	d
__MESH_H	mesh.h	9;"	d
__QUEUE_H	queue.h	9;"	d
__UTILS_H	utils.h	9;"	d
__dlist_add	dlist.h	/^static inline void __dlist_add(dlist_t *node,$/;"	f
__dlist_del	dlist.h	/^static inline void __dlist_del(dlist_t *prev, dlist_t *next) {$/;"	f
create_bounding_triangle	utils.c	/^int create_bounding_triangle(const vertex_t *vertices, int num, vertex_t *out)$/;"	f
cross	utils.c	/^double cross(const vertex_t *p0, const vertex_t *p1, const vertex_t *p2)$/;"	f
data	queue.h	/^    void *data;$/;"	m	struct:queue_entry_t
dcmp	utils.c	/^int dcmp(double x)$/;"	f
dlist_add	dlist.h	/^static inline void dlist_add(dlist_t *node, dlist_t *head) {$/;"	f
dlist_add_tail	dlist.h	/^static inline void dlist_add_tail(dlist_t *node, dlist_t *head) {$/;"	f
dlist_del	dlist.h	/^static inline void dlist_del(dlist_t *node) {$/;"	f
dlist_entry	dlist.h	70;"	d
dlist_foreach	dlist.h	73;"	d
dlist_foreach_safe	dlist.h	76;"	d
dlist_t	dlist.h	/^typedef struct dlist_t {$/;"	s
dlist_t	dlist.h	/^}dlist_t;$/;"	t	typeref:struct:dlist_t
edge	mesh.h	/^    half_edge_t *edge;$/;"	m	struct:triangle_t
edge	mesh.h	/^    half_edge_t *edge;$/;"	m	struct:vertex_t
elist	mesh.h	/^    dlist_t elist;$/;"	m	struct:mesh_t
eps	base.h	11;"	d
eps	utils.h	17;"	d
face	mesh.h	/^    triangle_t *face;$/;"	m	struct:half_edge_t
gc_elist	mesh.h	/^    dlist_t gc_elist;$/;"	m	struct:mesh_t
gc_tlist	mesh.h	/^    dlist_t gc_tlist;$/;"	m	struct:mesh_t
half_edge_t	mesh.h	/^struct half_edge_t {$/;"	s
half_edge_t	mesh.h	/^typedef struct half_edge_t half_edge_t;$/;"	t	typeref:struct:half_edge_t
head	queue.h	/^    dlist_t head;$/;"	m	struct:queue_t
in_circumcircle	utils.c	/^int in_circumcircle(const vertex_t *a, const vertex_t *b, const vertex_t *c,$/;"	f
in_tri_circumcircle	utils.c	/^int in_tri_circumcircle(const triangle_t *tri, const vertex_t *p)$/;"	f
in_triangle	utils.c	/^int in_triangle(const triangle_t *tri, const vertex_t *p)$/;"	f
init_dlist_node	dlist.h	/^static inline void init_dlist_node(dlist_t *node) {$/;"	f
log_err	utils.h	16;"	d
main	test.c	/^int main()$/;"	f
makeup_ccw_order	utils.h	33;"	d
makeup_edge_loop	mesh.c	197;"	d	file:
mesh_add_constrained_line	mesh.c	/^int mesh_add_constrained_line(mesh_t *self, vertex_t *st, vertex_t *ed)$/;"	f
mesh_add_constrained_poly	mesh.c	/^int mesh_add_constrained_poly(mesh_t *self, vertex_t *verties, int num)$/;"	f
mesh_add_edge	mesh.c	/^static half_edge_t *mesh_add_edge(mesh_t *self, vertex_t *st, vertex_t *ed)$/;"	f	file:
mesh_add_half_edge	mesh.c	/^static half_edge_t *mesh_add_half_edge(mesh_t *self,$/;"	f	file:
mesh_add_new_vertex	mesh.c	/^static vertex_t *mesh_add_new_vertex(mesh_t *self, double x, double y)$/;"	f	file:
mesh_add_triangle	mesh.c	/^static int mesh_add_triangle(mesh_t *self,$/;"	f	file:
mesh_add_triangle_with_verties	mesh.c	/^static int mesh_add_triangle_with_verties(mesh_t *self,$/;"	f	file:
mesh_add_vertex	mesh.c	/^int mesh_add_vertex(mesh_t *self, double x, double y)$/;"	f
mesh_alloc_half_edge	mesh.c	/^static half_edge_t *mesh_alloc_half_edge(mesh_t *self)$/;"	f	file:
mesh_alloc_triangle	mesh.c	/^static triangle_t *mesh_alloc_triangle(mesh_t *self)$/;"	f	file:
mesh_alloc_vertex	mesh.c	/^static vertex_t *mesh_alloc_vertex(mesh_t *self)$/;"	f	file:
mesh_create_super_triangle	mesh.c	/^static void mesh_create_super_triangle(mesh_t *self,$/;"	f	file:
mesh_del_bad_triangle	mesh.c	/^static void mesh_del_bad_triangle(mesh_t *self, triangle_t *from, vertex_t *p,$/;"	f	file:
mesh_del_edge	mesh.c	/^static void mesh_del_edge(mesh_t *self, half_edge_t *he)$/;"	f	file:
mesh_del_half_edge	mesh.c	/^static void mesh_del_half_edge(mesh_t *self, half_edge_t *he)$/;"	f	file:
mesh_del_triangle	mesh.c	/^static void mesh_del_triangle(mesh_t *self, triangle_t *tri)$/;"	f	file:
mesh_destroy	mesh.c	/^void mesh_destroy(mesh_t *self)$/;"	f
mesh_dump_edge	mesh.c	/^void mesh_dump_edge(mesh_t *self)$/;"	f
mesh_dump_triangle	mesh.c	/^void mesh_dump_triangle(mesh_t *self)$/;"	f
mesh_dump_vertex	mesh.c	/^void mesh_dump_vertex(mesh_t *self)$/;"	f
mesh_free_half_edge	mesh.c	/^static void mesh_free_half_edge(mesh_t *self, half_edge_t *he)$/;"	f	file:
mesh_free_triangle	mesh.c	/^static void mesh_free_triangle(mesh_t *self, triangle_t *tri)$/;"	f	file:
mesh_get_vertex	mesh.c	/^static vertex_t *mesh_get_vertex(mesh_t *self, double x, double y)$/;"	f	file:
mesh_init	mesh.c	/^mesh_t *mesh_init(const vertex_t *verties, int num)$/;"	f
mesh_locate	mesh.c	/^static triangle_t *mesh_locate(mesh_t *self, const vertex_t *v)$/;"	f	file:
mesh_set_box	mesh.c	/^int mesh_set_box(mesh_t *self, double left, double top, int width, int height)$/;"	f
mesh_t	mesh.h	/^typedef struct mesh_t {$/;"	s
mesh_t	mesh.h	/^} mesh_t;$/;"	t	typeref:struct:mesh_t
next	dlist.h	/^	struct dlist_t *next;$/;"	m	struct:dlist_t	typeref:struct:dlist_t::dlist_t
next	mesh.h	/^    half_edge_t *next;$/;"	m	struct:half_edge_t
node	mesh.h	/^    dlist_t node;$/;"	m	struct:half_edge_t
node	mesh.h	/^    dlist_t node;$/;"	m	struct:triangle_t
node	mesh.h	/^    dlist_t node;$/;"	m	struct:vertex_t
num_e	mesh.h	/^    int num_e;$/;"	m	struct:mesh_t
num_t	mesh.h	/^    int num_t;$/;"	m	struct:mesh_t
num_v	mesh.h	/^    int num_v;$/;"	m	struct:mesh_t
pair	mesh.h	/^    half_edge_t *pair;$/;"	m	struct:half_edge_t
prev	dlist.h	/^	struct dlist_t *prev;$/;"	m	struct:dlist_t	typeref:struct:dlist_t::dlist_t
print_vertex	utils.c	/^void print_vertex(const vertex_t *v)$/;"	f
qnode	queue.h	/^    dlist_t qnode;$/;"	m	struct:queue_entry_t
queue_destroy	queue.c	/^void queue_destroy(queue_t *que) {$/;"	f
queue_empty	queue.c	/^int queue_empty(queue_t *que) {$/;"	f
queue_entry_t	queue.h	/^typedef struct queue_entry_t {$/;"	s
queue_entry_t	queue.h	/^}queue_entry_t;$/;"	t	typeref:struct:queue_entry_t
queue_head	queue.c	/^void *queue_head(queue_t *que) {$/;"	f
queue_init	queue.c	/^queue_t *queue_init() $/;"	f
queue_pop	queue.c	/^void *queue_pop(queue_t *que) {$/;"	f
queue_push	queue.c	/^int queue_push(queue_t *que, void *data) {$/;"	f
queue_size	queue.c	/^int queue_size(queue_t *que) {$/;"	f
queue_t	queue.h	/^typedef struct queue_t {$/;"	s
queue_t	queue.h	/^}queue_t;$/;"	t	typeref:struct:queue_t
queue_tail	queue.c	/^void *queue_tail(queue_t *que) {$/;"	f
size	queue.h	/^    size_t size;$/;"	m	struct:queue_t
super_tri	mesh.h	/^    vertex_t super_tri[3];$/;"	m	struct:mesh_t
tlist	mesh.h	/^    dlist_t tlist;$/;"	m	struct:mesh_t
triangle_t	mesh.h	/^struct triangle_t {$/;"	s
triangle_t	mesh.h	/^typedef struct triangle_t triangle_t;$/;"	t	typeref:struct:triangle_t
vert	mesh.h	/^    vertex_t *vert;$/;"	m	struct:half_edge_t
vertex_equal	utils.h	52;"	d
vertex_t	mesh.h	/^struct vertex_t {$/;"	s
vertex_t	mesh.h	/^typedef struct vertex_t vertex_t;$/;"	t	typeref:struct:vertex_t
verties	test.c	/^vertex_t verties[10];$/;"	v
vlist	mesh.h	/^    dlist_t vlist;$/;"	m	struct:mesh_t
x	mesh.h	/^    double x;$/;"	m	struct:vertex_t
y	mesh.h	/^    double y;$/;"	m	struct:vertex_t
